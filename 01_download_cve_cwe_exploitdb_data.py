import requests
import json
import zipfile
import os

# Funktion, um CVE-Daten von der NVD-API abzurufen und in einer JSON-Datei zu speichern
def download_cve_data():
    base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
    start_index = 0
    results_per_page = 2000
    total_results = 1
    all_cves = []

    while start_index < total_results:
        url = f'{base_url}?startIndex={start_index}&resultsPerPage={results_per_page}'
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            total_results = data['totalResults']
            all_cves.extend(data['vulnerabilities'])
            start_index += results_per_page
            
            # Statusmeldung ausgeben
            progress = (start_index / total_results) * 100
            print(f"CVE-List Daten werden abgerufen: {start_index} von insgesamt {total_results} ({progress:.2f}%)")
        else:
            print(f"Fehler bei der Anforderung der CVE-Daten: {response.status_code}")
            break

    json_filename = 'cve_data.json'

    # JSON-Datei speichern
    with open(json_filename, 'w', encoding='utf-8') as json_file:
        json.dump(all_cves, json_file, ensure_ascii=False, indent=4)
    
    print(f"Die Daten wurden erfolgreich in {json_filename} gespeichert.")
    return json_filename

# Funktion zum Herunterladen und Entpacken der CWE-Daten
def download_and_extract_cwe_data():
    cwe_url = 'https://cwe.mitre.org/data/xml/cwec_latest.xml.zip'
    cwe_zip_filename = 'cwec_latest.xml.zip'
    
    # CWE ZIP-Datei herunterladen
    response = requests.get(cwe_url)
    with open(cwe_zip_filename, 'wb') as file:
        file.write(response.content)
    print(f"CWE-List ZIP-Datei {cwe_zip_filename} heruntergeladen.")
    
    # ZIP-Datei entpacken
    with zipfile.ZipFile(cwe_zip_filename, 'r') as zip_ref:
        zip_ref.extractall()
        extracted_files = zip_ref.namelist()  # Liste der entpackten Dateien
    print(f"CWE-List ZIP-Datei {cwe_zip_filename} entpackt.")
    
    if extracted_files:
        extract_filename = extracted_files[0]  # Nehmen wir an, dass die erste Datei die relevante ist
        print(f"Entpackte Datei: {extract_filename}")
        # Entpackte Datei umbenennen
        if os.path.exists(extract_filename):
            os.rename(extract_filename, 'cwec_latest.xml')
            print("Datei umbenannt in: cwec_latest.xml")
        else:
            print(f"Datei {extract_filename} nicht gefunden zum Umbenennen.")
    else:
        extract_filename = None
        print("Keine Dateien entpackt.")

    # ZIP-Datei löschen, nachdem sie entpackt und die Datei umbenannt wurde
    if os.path.exists(cwe_zip_filename):
        os.remove(cwe_zip_filename)
        print(f"ZIP-Datei {cwe_zip_filename} wurde gelöscht.")
    
    return extract_filename

# URL der Exploit-DB CSV-Datei
exploit_db_url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv?ref_type=heads&inline=false"

# Funktion zum Herunterladen der CSV-Datei
def download_csv(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            file.write(response.content)
        print(f"Daten der Exploit-DB erfolgreich in {filename} gespeichert.")
    else:
        print(f"Fehler beim Herunterladen der Exploit-DB. Statuscode: {response.status_code}")

# Aufruf der Funktionen zum Herunterladen der CVE- und CWE-Daten
download_csv(exploit_db_url, 'files_exploits.csv')
cwe_xml_filename = download_and_extract_cwe_data()
json_filename = download_cve_data()
