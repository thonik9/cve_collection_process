import requests
import csv
import pandas as pd
from tqdm import tqdm
from datetime import datetime
import re

# URL der Exploit-DB CSV-Datei
exploit_db_url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv?ref_type=heads&inline=false"

# Funktion zum Herunterladen der CSV-Datei
def download_csv(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            file.write(response.content)
        print(f"{filename} erfolgreich heruntergeladen.")
    else:
        print(f"Fehler beim Herunterladen von {filename}. Statuscode: {response.status_code}")

# Funktion zum Konvertieren des Datumsformats
def convert_date(date_str):
    if isinstance(date_str, str) and re.match(r'\d{4}-\d{2}-\d{2}', date_str):
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d")
            return dt.strftime("%Y-%m-%dT%H:%M:%S.000")
        except ValueError:
            return 'N/A'
    return 'N/A'

# Funktion zum Mergen der CSV-Dateien
def merge_csv(exploit_csv, filtered_csv, output_csv):
    # Exploit-DB CSV-Datei laden
    exploit_df = pd.read_csv(exploit_csv, delimiter=',', low_memory=False)
    
    # Gefilterte CVEs CSV-Datei laden
    filtered_df = pd.read_csv(filtered_csv, delimiter=',', low_memory=False)

    # Neue Spaltennamen für die Exploit-DB Daten
    new_columns = {
        'id': 'Exploit DB ID',
        'platform': 'Exploit DB Platform',
        'codes': 'Exploit DB Codes',
    }

    # Umbenennen der Spalten
    exploit_df.rename(columns=new_columns, inplace=True)

    # Hinzufügen neuer Spalten zu gefilterten CVEs DataFrame
    for col in new_columns.values():
        filtered_df[col] = ''

    # Iteration über die gefilterten CVEs
    with tqdm(total=len(filtered_df), desc="Verarbeitung Exploits", unit="CVE", ncols=100) as pbar:
        for index, row in filtered_df.iterrows():
            cve_id = row['CVE ID']
            matching_exploits = exploit_df[exploit_df['Exploit DB Codes'].str.contains(cve_id, na=False)]

            # Wenn passende Exploits gefunden wurden, füge die Informationen hinzu
            if not matching_exploits.empty:
                for col in new_columns.values():
                    filtered_df.at[index, col] = '; '.join(matching_exploits[col].astype(str).tolist())

            pbar.update(1)

    # Speichern des zusammengeführten DataFrames in eine neue CSV-Datei
    filtered_df.to_csv(output_csv, index=False)
    print(f"Die zusammengeführten Daten wurden erfolgreich in {output_csv} gespeichert.")

if __name__ == '__main__':
    merge_csv('files_exploits.csv', 'DATA_03_cvelist_base_filtered_added_cwe_description.csv', 'DATA_04_cvelist_base_filtered_added_exploitdb_reference.csv')
